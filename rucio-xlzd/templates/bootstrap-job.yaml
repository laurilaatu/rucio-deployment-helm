{{- if .Values.bootstrap.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-rucio-bootstrap-job
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    spec:
      restartPolicy: OnFailure
      
      initContainers:
        # Step 1: Initialize the DB and create the root account
        - name: db-init
          # This specific image creates the schema and the root/bootstrap users
          image: rucio/rucio-init:latest
          imagePullPolicy: Always
          env:
            # Provide the necessary env vars for the init container to work
            - name: RUCIO_CFG_DATABASE_DEFAULT
              value: "postgresql+psycopg://{{ .Values.postgresql.auth.username }}:{{ .Values.postgresql.auth.password }}@{{ .Values.rucio.server.db_host }}/{{ .Values.postgresql.auth.database }}"
            - name: RUCIO_CFG_BOOTSTRAP_USERPASS_IDENTITY
              value: "{{ .Values.bootstrap.auth.username }}"
            - name: RUCIO_CFG_BOOTSTRAP_USERPASS_PWD
              value: "{{ .Values.bootstrap.auth.password }}"

        # Step 2: Wait for the Rucio server to be online
        - name: wait-for-rucio-server
          image: busybox:1.36
          imagePullPolicy: IfNotPresent
          command: ['sh', '-c']
          args:
            - |
              set -ex
              until nc -z -w 5 "rucio-service" 443; do
                echo "Waiting for rucio-server..." && sleep 5;
              done
              echo "✅ Rucio server is ready."

      # Step 3: Run advanced configuration (add identity, RSEs, etc.)
      containers:
        - name: configure-rucio
          # This image has the rucio-admin tools for advanced configuration
          image: "{{ .Values.client.image.repository }}:{{ .Values.client.image.tag }}"
          volumeMounts:
            - name: rucio-bootstrap-config-volume
              mountPath: /opt/rucio/etc/rucio.cfg
              subPath: rucio.cfg
            - name: client-certs-volume
              mountPath: /opt/rucio/certs/user
            - name: ca-certs-volume
              mountPath: /etc/grid-security/certificates/ca.cert.pem
              subPath: ca.pem
          
          command: ["/bin/sh", "-c"]
          args:
            - |
              set -ex
              echo "--- Starting Rucio Configuration Job ---"

              echo "1. Configuring identity for account 'root'..."
              rucio-admin account add-identity --account root \
                --type X509 \
                --id "{{ .Values.bootstrap.identity.id }}" || echo "Identity already exists."
              echo "✅ Identity configuration complete."

              # Add RSE configuration here if needed...
              
              echo "--- Rucio Configuration Job Finished ---"

      volumes:
        - name: rucio-bootstrap-config-volume
          configMap:
            name: rucio-bootstrap-config # This should be the userpass config
        - name: client-certs-volume
          secret:
            secretName: {{ .Values.client.security.userSecretName }}
        - name: ca-certs-volume
          secret:
            secretName: rucio-ca-secret
{{- end }}