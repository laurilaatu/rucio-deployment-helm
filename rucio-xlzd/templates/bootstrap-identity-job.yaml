{{- if .Values.bootstrapIdentity.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-bootstrap-identity-job
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: {{ .Release.Name }}-bootstrap-identity
      labels:
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
    spec:
      restartPolicy: OnFailure
      initContainers:
        - name: wait-for-rucio-server
          image: busybox:1.36
          imagePullPolicy: IfNotPresent
          command: ['sh', '-c']
          args:
            - |
              set -ex
              SERVER_HOST="rucio-service"
              SERVER_PORT="443"
              
              echo "Waiting for Rucio server at ${SERVER_HOST}:${SERVER_PORT}..."
              counter=0
              until nc -z -w 5 "${SERVER_HOST}" "${SERVER_PORT}"; do
                sleep 5
                counter=$((counter+1))
                if [ $counter -ge 36 ]; then
                  echo "Error: Timeout waiting for Rucio server."
                  exit 1
                fi
              done
              echo "Rucio server is ready."

      containers:
        - name: bootstrap-identity
          image: "{{ .Values.client.image.repository }}:{{ .Values.client.image.tag }}"
          imagePullPolicy: {{ .Values.client.image.pullPolicy | default "IfNotPresent" }}
          volumeMounts:
            - name: rucio-config-volume
              mountPath: /opt/rucio/etc/rucio.cfg
              subPath: rucio.cfg
            - name: client-certs-volume
              mountPath: /opt/rucio/certs/user
              readOnly: true
            - name: ca-certs-volume
              mountPath: /etc/grid-security/certificates/ca.cert.pem
              subPath: ca.pem
              readOnly: true
          command: ["/bin/sh", "-c"]
          args:
            - |
              set -ex
              echo "--- Starting bootstrap identity job ---"
              CERT_PATH="/opt/rucio/certs/user/usercert.pem"
              echo "Extracting DN from certificate at ${CERT_PATH}"
              CLIENT_DN=$(openssl x509 -in $CERT_PATH -noout -subject | sed 's/subject= //')
              echo "Found DN: ${CLIENT_DN}"
              echo "Checking for existing identity mapping for account root..."
              if rucio-admin account list-identities --account root | grep -qF "${CLIENT_DN}"; then
                echo "Identity already exists for root account. Nothing to do."
              else
                echo "Identity not found. Adding identity to root account..."
                rucio-admin account add-identity --account root --type X509 --id "${CLIENT_DN}"
                echo "Successfully added identity."
              fi
              echo "--- Bootstrap identity job completed successfully ---"
      
      volumes:
        - name: rucio-config-volume
          configMap:
            name: rucio-client-config
        - name: client-certs-volume
          secret:
            secretName: {{ .Values.client.security.userSecretName }}
        - name: ca-certs-volume
          secret:
            secretName: rucio-ca-secret
{{- end }}