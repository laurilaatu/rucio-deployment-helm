{{- if .Values.client.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: rucio-client-config
data:
  rucio.cfg: |
    [client]
    rucio_host = {{ required "rucio.server.host is required!" .Values.rucio.server.host }}
    auth_host = {{ required "rucio.server.host is required!" .Values.rucio.server.host }}
    auth_type = {{ .Values.client.config.auth_type }}
    account = {{ .Values.client.config.account }}
    username = {{ .Values.client.config.username }}
    password = {{ .Values.client.config.password }}
    ca_cert = /etc/grid-security/ca.pem
    client_cert = /opt/rucio/certs/user/usercert.pem
    client_key = /opt/rucio/certs/user/userkey.pem
    request_retries = 3

  register-rse.sh: |
    #!/bin/sh
    set -e
    
    RSE_NAME="BOULBY-XROOTD"
    TOKEN_PATH="/opt/rucio/etc/rse-credentials/boulby-xrootd/xrootd_token"
    
    echo "RSE Registration Script: Starting..."
    
    echo "Waiting for Rucio server and init-job to complete..."
    until rucio whoami; do
      echo "Rucio not ready yet. Retrying in 10 seconds..."
      sleep 10
    done
    echo "✅ Rucio server is ready."
    
    echo "Checking if RSE '$RSE_NAME' already exists..."
    # Check for an attribute; if error, it doesn't exist
    if rucio rse attribute get "$RSE_NAME" rse_type >/dev/null 2>&1; then
      echo "✅ RSE '$RSE_NAME' already exists. Ensuring configuration..."
    else
      echo "Registering new RSE: $RSE_NAME"
      rucio rse add "$RSE_NAME"
    fi

    echo "Attempting to delete existing protocol (in case of previous errors)..."
    # Try deleting first to ensure clean state, ignore errors if it doesn't exist
    rucio rse protocol delete "$RSE_NAME" --scheme root --hostname "xlzd-data.boulby.ac.uk" --port 1094 || true

    echo "Setting RSE protocol using GFAL implementation..."
    # Add the protocol with GFAL
    rucio rse protocol add "$RSE_NAME" --host "xlzd-data.boulby.ac.uk" --scheme root \
      --port 1094 \
      --prefix "/rucio/" \
      --impl "rucio.rse.protocols.gfal.Default" \
      --domain-json '{"wan": {"read": 1, "write": 1, "delete": 1, "third_party_copy_read": 1}, "lan": {"read": 1, "write": 1, "delete": 1}}'

    echo "Setting RSE attributes..."
    # Add attributes (will update if they exist)
    rucio rse attribute add "$RSE_NAME" --key "auth_token" --value "$TOKEN_PATH"
    rucio rse attribute add "$RSE_NAME" --key "sign_url" --value "wan.read"
    rucio rse attribute add "$RSE_NAME" --key "lfn2pfn_algorithm" --value "hash"
    
    echo "Setting RSE limits..."
    # Add limit (will update if it exists)
    rucio account limit add root --rse "$RSE_NAME" --bytes 1000000000000 # 1TB

    echo "✅ Successfully configured RSE '$RSE_NAME'."
{{- end }}